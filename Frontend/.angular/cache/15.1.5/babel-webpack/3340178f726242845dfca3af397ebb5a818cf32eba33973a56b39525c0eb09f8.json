{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// user class \nexport class User {}\nexport class CrudService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.tokenKey = 'token';\n    this.REST_API = 'http://127.0.0.1:8000/api/medicament';\n    this.httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n  }\n  addMedicament(data) {\n    const options = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    let API_URL = `${this.REST_API}`;\n    return this.httpClient.post(API_URL, data).pipe(catchError(this.handleError));\n  }\n  getMedicaments() {\n    return this.httpClient.get(`${this.REST_API}`);\n  }\n  getMedicament(id) {\n    let API_URL = `${this.REST_API}/${id}`;\n    return this.httpClient.get(API_URL, {\n      headers: this.httpHeaders\n    }).pipe(map(res => {\n      return res || {};\n    }), catchError(this.handleError));\n  }\n  deleteMedicament(id) {\n    let API_URL = `${this.REST_API}/${id}`;\n    return this.httpClient.delete(API_URL, {\n      headers: this.httpHeaders\n    }).pipe(catchError(this.handleError));\n  }\n  updateMedicament(id, data) {\n    let API_URL = `${this.REST_API}/${id}`;\n    return this.httpClient.put(API_URL, data, {\n      headers: this.httpHeaders\n    }).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = `Error Code : ${error.status}\\n Message: ${errorMessage}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n  registerUser(data) {\n    return this.httpClient.post('http://127.0.0.1:8000/api/register', data);\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem(this.tokenKey);\n  }\n  login(data) {\n    return this.httpClient.post('http://127.0.0.1:8000/api/login', data);\n  }\n  getImage(filename) {\n    return this.httpClient.get(`http://localhost:8000/api/${filename}`, {\n      responseType: 'blob'\n    });\n  }\n  uploadFile(event) {\n    const file = event.target.files[0];\n    const formData = new FormData();\n    formData.append('file', file);\n    this.httpClient.post('http://localhost:3000/upload', formData).subscribe(response => {\n      console.log(response);\n    });\n  }\n}\nCrudService.ɵfac = function CrudService_Factory(t) {\n  return new (t || CrudService)(i0.ɵɵinject(i1.HttpClient));\n};\nCrudService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CrudService,\n  factory: CrudService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["catchError","map","throwError","HttpHeaders","User","CrudService","constructor","httpClient","set","addMedicament","data","options","headers","API_URL","REST_API","post","pipe","handleError","getMedicaments","get","getMedicament","id","httpHeaders","res","deleteMedicament","delete","updateMedicament","put","error","errorMessage","ErrorEvent","message","status","console","log","registerUser","isLoggedIn","localStorage","getItem","tokenKey","login","getImage","filename","responseType","uploadFile","event","file","target","files","formData","FormData","append","subscribe","response","factory","providedIn"],"sourceRoot":"","sources":["/home/windows/Documents/projects/WEBprojectHOPE/Frontend/src/app/service/crud.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {Medicament} from './Medicament';\nimport { catchError,map } from 'rxjs/operators';\nimport { Observable,throwError } from 'rxjs';\nimport { HttpClient,HttpHeaders,HttpErrorResponse } from '@angular/common/http';\n\n// user class \nexport class User{\n\n  name!:String ;\n  email!:String;\n  password!:String;\n\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CrudService {\n  private tokenKey = 'token';\n \n\n\n\n  REST_API: string = 'http://127.0.0.1:8000/api/medicament' ; \n  httpHeaders= new HttpHeaders().set('Content-Type','application/json');\n  constructor(private httpClient: HttpClient){\n\n  }\n\n  addMedicament(data:FormData):Observable<any>{\n    const options = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    \n\n    let API_URL= `${this.REST_API}` ;\n    return this.httpClient.post(API_URL,data).pipe(catchError(this.handleError))\n  }\n\n  getMedicaments(){\n    return this.httpClient.get(`${this.REST_API}`);\n\n  }\n  getMedicament (id: any):Observable<any>{\n\n    let API_URL= `${this.REST_API}/${id}` ;\n    return this.httpClient.get(API_URL,{headers:this.httpHeaders}).pipe(map((res:any)=>{\n      return res || {}\n    }),\n      catchError(this.handleError))\n  }\n\n  deleteMedicament(id:any):Observable<any>{\n\n    let API_URL = `${this.REST_API}/${id}` ;\n    return this.httpClient.delete(API_URL,{headers: this.httpHeaders}).pipe(catchError(this.handleError));\n  }\n\n\n    updateMedicament(id:any, data:Medicament):Observable<any>{\n\n      let API_URL = `${this.REST_API}/${id}` ;\n      return this.httpClient.put(API_URL,data,{headers: this.httpHeaders}).pipe(catchError(this.handleError));\n    }\n\n  \n\n    handleError(error:HttpErrorResponse){\n      let errorMessage = '' ;\n      if ( error.error instanceof ErrorEvent){\n        errorMessage =error.error.message ;\n\n      }else {\n        errorMessage=`Error Code : ${error.status}\\n Message: ${errorMessage}`\n      }\n      console.log(errorMessage);\n\n      return throwError(errorMessage);\n    }\n\n    registerUser(data:any){\n      return this.httpClient.post('http://127.0.0.1:8000/api/register',data);\n\n\n    }\n\n    isLoggedIn(){\n\n      return !!localStorage.getItem (this.tokenKey) ;\n\n    }\n\n\n login(data:any){\n  return this.httpClient.post('http://127.0.0.1:8000/api/login',data)\n\n\n } \n \n getImage(filename : string ){\n  return this.httpClient.get(`http://localhost:8000/api/${filename}`, { responseType: 'blob' });\n}\n\n uploadFile(event: any) {\n  const file = event.target.files[0];\n  const formData = new FormData();\n  formData.append('file', file);\n  this.httpClient.post('http://localhost:3000/upload', formData).subscribe((response) => {\n    console.log(response);\n  });\n}\n}\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}