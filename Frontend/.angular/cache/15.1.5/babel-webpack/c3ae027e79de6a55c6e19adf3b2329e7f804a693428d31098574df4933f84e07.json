{"ast":null,"code":"import { __decorate } from \"tslib\";\n/*import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormBuilder,FormGroup,Validator, Validators } from '@angular/forms';\nimport { ConfirmedValidator } from 'src/app/confirmed.validator';\n@Component({\n selector: 'app-sign_up',\n templateUrl: './sign_up.component.html',\n styleUrls: ['./sign_up.component.scss']\n})\nexport class Sign_upComponent implements OnInit{\n\n\n form:FormGroup;\n submitted=false;\n\n\n constructor(private formBuilder : FormBuilder){\n\n   this.form =this.formBuilder.group({\n     name:['',Validators.required],\n     email:['',[Validators.required,Validators.email]],\n     password:['',[Validators.required,Validators.minLength(6)]],\n     confirmPassword: ['',Validators.required]\n },{\n  validator:ConfirmedValidator('password','confirmPassword')\n })\n }\n\n createForm(){\n   this.form =this.formBuilder.group({\n     name:['',Validators.required],\n     email:['',[Validators.required,Validators.email]],\n     password:['',[Validators.required,Validators.minLength(6)]],\n     confirmPassword: ['',Validators.required]\n })}\n\n ngOnInit():void{\n\n   this.createForm();\n\n }\n\n get f(): {[key: string ]: AbstractControl}{\n   return this.form.controls ;\n }\n submit(){\n   this.submitted = true ;\n   if (this.form.invalid){\n     return;\n   }\n\n }\n \n\n}\n\n*/\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport Validation from '../../confirmed.validator';\nlet Sign_upComponent = class Sign_upComponent {\n  constructor(formBuilder, crudService, toastr) {\n    this.formBuilder = formBuilder;\n    this.crudService = crudService;\n    this.toastr = toastr;\n    this.form = new FormGroup({\n      name: new FormControl(''),\n      email: new FormControl(''),\n      password: new FormControl(''),\n      confirmPassword: new FormControl('')\n    });\n    this.submitted = false;\n  }\n  get f() {\n    return this.form.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    if (this.form.invalid) {\n      return;\n    }\n    this.crudService.registerUser(this.form.value).subscribe(res => {\n      this.data = res;\n      //  console.log(res);\n      if (this.data.status === 1) {\n        this.toastr.success(JSON.stringify(this.data.message), JSON.stringify(this.data.code), {\n          timeOut: 2000,\n          progressBar: true\n        });\n      } else {\n        this.toastr.error(JSON.stringify(this.data.message), JSON.stringify(this.data.code), {\n          timeOut: 2000,\n          progressBar: true\n        });\n      }\n    });\n    console.log(JSON.stringify(this.form.value, null, 2));\n  }\n  onReset() {\n    this.submitted = false;\n    this.form.reset();\n  }\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(40)]],\n      confirmPassword: ['', Validators.required]\n    }, {\n      validators: [Validation.match('password', 'confirmPassword')]\n    });\n  }\n};\nSign_upComponent = __decorate([Component({\n  selector: 'app-sign_up',\n  templateUrl: './sign_up.component.html',\n  styleUrls: ['./sign_up.component.scss']\n})], Sign_upComponent);\nexport { Sign_upComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","FormGroup","Validators","Validation","Sign_upComponent","constructor","formBuilder","crudService","toastr","name","email","password","confirmPassword","f","form","controls","onSubmit","submitted","invalid","registerUser","value","subscribe","res","data","status","success","JSON","stringify","message","code","timeOut","progressBar","error","console","log","onReset","reset","ngOnInit","group","required","minLength","maxLength","validators","match","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/windows/Documents/projects/WEBprojectHOPE/Frontend/src/app/Views/sign_up/sign_up.component.ts"],"sourcesContent":[" /*import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormBuilder,FormGroup,Validator, Validators } from '@angular/forms';\nimport { ConfirmedValidator } from 'src/app/confirmed.validator';\n@Component({\n  selector: 'app-sign_up',\n  templateUrl: './sign_up.component.html',\n  styleUrls: ['./sign_up.component.scss']\n})\nexport class Sign_upComponent implements OnInit{\n\n\n  form:FormGroup;\n  submitted=false;\n\n\n  constructor(private formBuilder : FormBuilder){\n\n    this.form =this.formBuilder.group({\n      name:['',Validators.required],\n      email:['',[Validators.required,Validators.email]],\n      password:['',[Validators.required,Validators.minLength(6)]],\n      confirmPassword: ['',Validators.required]\n  },{\n   validator:ConfirmedValidator('password','confirmPassword')\n  })\n  }\n\n  createForm(){\n    this.form =this.formBuilder.group({\n      name:['',Validators.required],\n      email:['',[Validators.required,Validators.email]],\n      password:['',[Validators.required,Validators.minLength(6)]],\n      confirmPassword: ['',Validators.required]\n  })}\n\n  ngOnInit():void{\n\n    this.createForm();\n\n  }\n\n  get f(): {[key: string ]: AbstractControl}{\n    return this.form.controls ;\n  }\n  submit(){\n    this.submitted = true ;\n    if (this.form.invalid){\n      return;\n    }\n\n  }\n  \n\n}\n\n*/\nimport { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { CrudService } from 'src/app/service/crud.service';\nimport { ToastrService } from 'ngx-toastr';\n\nimport Validation from '../../confirmed.validator';\n@Component({\n  selector: 'app-sign_up',\n  templateUrl: './sign_up.component.html',\n  styleUrls: ['./sign_up.component.scss']\n})\n\nexport class Sign_upComponent implements OnInit{\n\n  form: FormGroup = new FormGroup({\n    name: new FormControl(''),\n    email: new FormControl(''),\n    password: new FormControl(''),\n    confirmPassword: new FormControl(''),\n  });\n  submitted = false;\n  data:any;\n\n  constructor(private formBuilder: FormBuilder,private crudService :CrudService, private toastr:ToastrService) {}\n\n  get f(): { [key: string]: AbstractControl } {\n    return this.form.controls;\n  }\n  onSubmit(): void {\n    this.submitted = true;\n\n    if (this.form.invalid) {\n      return;\n\n\n    }\n this.crudService.registerUser(this.form.value).subscribe(res => {\n\n\n      this.data= res ;\n    //  console.log(res);\n    if (this.data.status===1){\n      this.toastr.success(JSON.stringify(this.data.message),JSON.stringify(this.data.code),{\n        timeOut: 2000,\n        progressBar: true \n        \n      });\n    }else{\n      this.toastr.error(JSON.stringify(this.data.message),JSON.stringify(this.data.code), {\n        timeOut:2000,\n        progressBar:true \n      })\n    }\n\n    })\n   \n\n    console.log(JSON.stringify(this.form.value, null, 2));\n  }\n\n  onReset(): void {\n    this.submitted = false;\n    this.form.reset();\n  }\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group(\n      {\n        name: ['', Validators.required],\n      \n        email: ['', [Validators.required, Validators.email]],\n        password: [\n          '',\n          [\n            Validators.required,\n            Validators.minLength(6),\n            Validators.maxLength(40)\n          ]\n        ],\n        confirmPassword: ['', Validators.required],\n      },\n      {\n        validators: [Validation.match('password', 'confirmPassword')]\n      }\n    );\n  }\n\n  \n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}