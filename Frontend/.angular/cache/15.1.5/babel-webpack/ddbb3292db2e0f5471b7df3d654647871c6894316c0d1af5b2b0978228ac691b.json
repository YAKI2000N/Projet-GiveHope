{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport * as FileSaver from 'file-saver';\nlet AddMedicamentComponent = class AddMedicamentComponent {\n  constructor(formBuilder, router, ngZone, crudService) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.ngZone = ngZone;\n    this.crudService = crudService;\n    this.medicamentForm = this.formBuilder.group({\n      name: [''],\n      description: [''],\n      price: [''],\n      photo: [''] // add photo field with initial value null\n    });\n  }\n\n  ngOnInit() {}\n  onSubmit() {\n    this.crudService.addMedicament(this.medicamentForm.value).subscribe(() => {\n      console.log('Data added successfully');\n      this.ngZone.run(() => this.router.navigateByUrl('/medicament-list'));\n    }, err => {\n      console.log(err);\n    });\n  }\n  // function to handle file input change event\n  onFileSelected(event) {\n    console.log(\"d5alt on file selected\");\n    const file = event.target.files[0];\n    this.uploadFile(file);\n  }\n  uploadFile(file) {\n    console.log(\"d5alt l upload file\");\n    const reader = new FileReader();\n    reader.onload = () => {\n      const content = reader.result;\n      const filename = file.name;\n      const directory = 'assets/uploads'; // directory where the file will be saved\n      const filePath = `${directory}/${filename}`;\n      // save the file to the specified directory\n      const fileBlob = new Blob([content], {\n        type: file.type\n      });\n      FileSaver.saveAs(fileBlob, filePath);\n    };\n    reader.readAsBinaryString(file);\n  }\n};\nAddMedicamentComponent = __decorate([Component({\n  selector: 'app-add-medicament',\n  templateUrl: './add-medicament.component.html',\n  styleUrls: ['./add-medicament.component.scss']\n})], AddMedicamentComponent);\nexport { AddMedicamentComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAwB,eAAe;AAKzD,OAAO,KAAKC,SAAS,MAAM,YAAY;AAMhC,IAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAInCC,YACOC,WAAwB,EACvBC,MAAc,EACdC,MAAc,EACfC,WAAwB;IAHxB,gBAAW,GAAXH,WAAW;IACV,WAAM,GAANC,MAAM;IACN,WAAM,GAANC,MAAM;IACP,gBAAW,GAAXC,WAAW;IAElB,IAAI,CAACC,cAAc,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MAC7CC,IAAI,EAAE,CAAC,EAAE,CAAC;MACVC,WAAW,EAAE,CAAC,EAAE,CAAC;MACjBC,KAAK,EAAE,CAAC,EAAE,CAAC;MACXC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;KACX,CAAC;EACF;;EAEAC,QAAQ,IACR;EAEAC,QAAQ;IACR,IAAI,CAACR,WAAW,CAACS,aAAa,CAAC,IAAI,CAACR,cAAc,CAACS,KAAK,CAAC,CACxDC,SAAS,CAAC,MAAK;MAChBC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtC,IAAI,CAACd,MAAM,CAACe,GAAG,CAAC,MAAM,IAAI,CAAChB,MAAM,CAACiB,aAAa,CAAC,kBAAkB,CAAC,CAAC;IACpE,CAAC,EAAGC,GAAG,IAAI;MACXJ,OAAO,CAACC,GAAG,CAACG,GAAG,CAAC;IAChB,CAAC,CAAC;EACF;EAEA;EAEAC,cAAc,CAACC,KAAU;IACvBN,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACrC,MAAMM,IAAI,GAASD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACxC,IAAI,CAACC,UAAU,CAACH,IAAI,CAAC;EACvB;EAEAG,UAAU,CAACH,IAAU;IACnBP,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC,MAAMU,MAAM,GAAG,IAAIC,UAAU,EAAE;IAC/BD,MAAM,CAACE,MAAM,GAAG,MAAK;MACnB,MAAMC,OAAO,GAAGH,MAAM,CAACI,MAAgB;MACvC,MAAMC,QAAQ,GAAGT,IAAI,CAAChB,IAAI;MAC1B,MAAM0B,SAAS,GAAG,gBAAgB,CAAC,CAAC;MACpC,MAAMC,QAAQ,GAAG,GAAGD,SAAS,IAAID,QAAQ,EAAE;MAE3C;MACA,MAAMG,QAAQ,GAAG,IAAIC,IAAI,CAAC,CAACN,OAAO,CAAC,EAAE;QAAEO,IAAI,EAAEd,IAAI,CAACc;MAAI,CAAE,CAAC;MACzDvC,SAAS,CAACwC,MAAM,CAACH,QAAQ,EAAED,QAAQ,CAAC;IACtC,CAAC;IAEDP,MAAM,CAACY,kBAAkB,CAAChB,IAAI,CAAC;EACjC;CAGC;AAzDYxB,sBAAsB,eALlCF,SAAS,CAAC;EACX2C,QAAQ,EAAE,oBAAoB;EAC9BC,WAAW,EAAE,iCAAiC;EAC9CC,SAAS,EAAE,CAAC,iCAAiC;CAC5C,CAAC,GACW3C,sBAAsB,CAyDlC;SAzDYA,sBAAsB","names":["Component","FileSaver","AddMedicamentComponent","constructor","formBuilder","router","ngZone","crudService","medicamentForm","group","name","description","price","photo","ngOnInit","onSubmit","addMedicament","value","subscribe","console","log","run","navigateByUrl","err","onFileSelected","event","file","target","files","uploadFile","reader","FileReader","onload","content","result","filename","directory","filePath","fileBlob","Blob","type","saveAs","readAsBinaryString","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/windows/Documents/projects/WEBprojectHOPE/Frontend/src/app/Views/product/medicament/add-medicament/add-medicament.component.ts"],"sourcesContent":["import { Component, OnInit, NgZone } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CrudService } from 'src/app/service/crud.service';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { saveAs } from 'file-saver';\nimport * as FileSaver from 'file-saver';\n@Component({\nselector: 'app-add-medicament',\ntemplateUrl: './add-medicament.component.html',\nstyleUrls: ['./add-medicament.component.scss']\n})\nexport class AddMedicamentComponent implements OnInit {\n\nmedicamentForm: FormGroup;\n\nconstructor(\npublic formBuilder: FormBuilder,\nprivate router: Router,\nprivate ngZone: NgZone,\npublic crudService: CrudService,\n) {\nthis.medicamentForm = this.formBuilder.group({\nname: [''],\ndescription: [''],\nprice: [''],\nphoto: [''] // add photo field with initial value null\n})\n}\n\nngOnInit(): void {\n}\n\nonSubmit(): any {\nthis.crudService.addMedicament(this.medicamentForm.value)\n.subscribe(() => {\nconsole.log('Data added successfully')\nthis.ngZone.run(() => this.router.navigateByUrl('/medicament-list'))\n}, (err) => {\nconsole.log(err)\n})\n}\n\n// function to handle file input change event\n\nonFileSelected(event: any) {\n  console.log(\"d5alt on file selected\")\n  const file: File = event.target.files[0];\n  this.uploadFile(file);\n}\n\nuploadFile(file: File) {\n  console.log(\"d5alt l upload file\")\n  const reader = new FileReader();\n  reader.onload = () => {\n    const content = reader.result as string;\n    const filename = file.name;\n    const directory = 'assets/uploads'; // directory where the file will be saved\n    const filePath = `${directory}/${filename}`;\n\n    // save the file to the specified directory\n    const fileBlob = new Blob([content], { type: file.type });\n    FileSaver.saveAs(fileBlob, filePath);\n  };\n\n  reader.readAsBinaryString(file);\n}\n\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}